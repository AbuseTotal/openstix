{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenSTIX","text":"<p>OpenSTIX is an unofficial STIX 2.1 library and toolkit built upon the foundations of the STIX2 library, aimed at enhancing the efficiency and productivity of cybersecurity professionals. It's developed and maintained by AbuseTotal, a startup committed to delivering high-quality software solutions in the cybersecurity domain.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Modular Design: Organizes the functionalities provided by STIX2 library into modules for easy consumption and extension.</li> <li>Workspace Class: Extends the <code>Environment</code> class into a <code>Workspace</code> class to facilitate seamless creation, removal, and management of STIX SDOs (Structured Data Objects) based on contributing properties.</li> <li>Built-in Datasets: Provides ready-to-use datasets including MITRE frameworks, geolocations, custom TLP markings, and industries to expedite the analytical process.</li> <li>Custom Objects and Extensions: Offers custom objects and extensions to assist analysts with additional informational resources such as Whois and DNS-Records.</li> </ul>"},{"location":"pages/setup/","title":"Setup","text":""},{"location":"pages/setup/#requirements","title":"Requirements","text":"<p>Before installing openstix, ensure that you meet the following requirements:</p> <ul> <li>Python 3.7 or higher</li> <li>pip (Python package manager)</li> <li>Virtual environment recommended (virtualenv, venv, hatch, etc.)</li> </ul>"},{"location":"pages/setup/#installation","title":"Installation","text":""},{"location":"pages/setup/#step-1-create-a-virtual-environment-optional-but-recommended","title":"Step 1: Create a Virtual Environment (Optional but Recommended)","text":"<p>It is recommended to create a virtual environment to avoid conflicts with other libraries and ensure a clean setup.</p> <pre><code>python -m venv env\nsource env/bin/activate  # For Linux/MacOS\nenv\\Scripts\\activate  # For Windows\n</code></pre>"},{"location":"pages/setup/#step-2-install-openstix","title":"Step 2: Install openstix","text":"<p>Install the openstix library using pip:</p> <pre><code>pip install openstix\n</code></pre>"},{"location":"pages/setup/#development-environment-setup","title":"Development Environment Setup","text":"<p>If you intend to contribute to the development of openstix, follow the steps below to set up your development environment:</p>"},{"location":"pages/setup/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<p>Clone the GitHub repository:</p> <pre><code>git clone https://github.com/AbuseTotal/openstix-python.git\ncd openstix-python\n</code></pre>"},{"location":"pages/setup/#step-2-install-development-dependencies","title":"Step 2: Install Development Dependencies","text":"<p>Ensure you have all the necessary dependencies to develop and test the library.</p> <ol> <li> <p>Create and activate a virtual environment: <pre><code>python -m venv env\nsource env/bin/activate  # For Linux/MacOS\nenv\\Scripts\\activate  # For Windows\n</code></pre></p> </li> <li> <p>Install the development dependencies: <pre><code>pip install -r requirements-dev.txt\n</code></pre></p> </li> </ol>"},{"location":"pages/setup/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"pages/setup/#issue-pip-is-not-installed","title":"Issue: pip is not installed","text":"<p>If you encounter the error <code>pip: command not found</code>, pip may not be installed or configured correctly on your system. Refer to the official pip documentation for installation instructions.</p>"},{"location":"pages/setup/#issue-dependency-conflicts","title":"Issue: Dependency Conflicts","text":"<p>If you encounter dependency conflict issues, consider using a virtual environment to isolate <code>openstix</code> dependencies from those of other projects.</p>"},{"location":"pages/cli/","title":"Command-line Interface","text":"<p>OpenSTIX provides a CLI tool to perform actions related to datasets.</p>"},{"location":"pages/cli/datasets/","title":"Datasets","text":""},{"location":"pages/cli/datasets/#download","title":"Download","text":"<p>Command that provides the capability to download the STIX datasets from different providers.</p> <pre><code>$ openstix datasets download --help\n\nUsage: openstix datasets download [OPTIONS]\n\n  Download datasets from STIX providers.\n\nOptions:\n  --provider [mitre|oasis-open]   Download the specified provider.\n  --datasets [atlas|tlp20|industries|capec|locations|vulnerabilities|attack]\n                                  Download the specified datasets.\n  --help                          Show this message and exit.\n</code></pre> <p>Note: all datasets will be stored in <code>$HOME/.openstix/</code>.</p>"},{"location":"pages/cli/datasets/#examples","title":"Examples","text":"<p>Download all datasets <pre><code>openstix datasets download\n</code></pre></p> <p>Download datasets from a provider <pre><code>openstix datasets download --provider mitre\n</code></pre></p>"},{"location":"pages/cli/datasets/#sync","title":"Sync","text":"<p>Command that provides the capability to sync the STIX datasets from one source to a sink (destination).</p> <pre><code>$ openstix datasets sync --help\n\nUsage: openstix datasets sync [OPTIONS]\n\n  Sync datasets to a TAXII server or a directory.\n\nOptions:\n  --source TEXT  The source dataset to sync.  [required]\n  --sink TEXT    The TAXII server or directory to sync to.  [required]\n  --send-bundle  Send all objects as a single bundle to the sink instead of\n                 individual objects.\n  --help         Show this message and exit.\n</code></pre>"},{"location":"pages/cli/datasets/#examples_1","title":"Examples","text":"<p>Send all MITRE objects <pre><code>openstix datasets sync --source $HOME/.openstix/mitre --sink https://taxii.example.com/taxii2/mitre/\n</code></pre></p>"},{"location":"pages/datasets/geolocation/","title":"GeoLocation","text":""},{"location":"pages/datasets/mitre/","title":"Mitre","text":""},{"location":"pages/datasets/setup/","title":"Setup","text":"<p>In order to setup the datasets, please run the following command: <pre><code>$ openstix-datasets --all\n</code></pre></p>"},{"location":"pages/library/extensions/","title":"Extensions","text":""},{"location":"pages/library/objects/","title":"Objects","text":""},{"location":"pages/library/objects/#standard-objects","title":"Standard Objects","text":"<p>Objects from STIX2 library can be accessed under <code>openstix.objects</code>: <pre><code>from opencti.objects import (\n    Artifact\n    AttackPattern\n    AutonomousSystem\n    Bundle\n    Campaign\n    CourseOfAction\n    Directory\n    DomainName\n    EmailAddress\n    EmailMessage\n    File\n    GranularMarking\n    Grouping\n    IPv4Address\n    IPv6Address\n    Identity\n    Incident\n    Indicator\n    Infrastructure\n    IntrusionSet\n    LanguageContent\n    Location\n    MACAddress\n    Malware\n    MalwareAnalysis\n    Mutex\n    NetworkTraffic\n    Note\n    ObservedData\n    Opinion\n    Process\n    Relationship\n    Report\n    Sighting\n    Software\n    StatementMarking\n    TLPMarking\n    ThreatActor\n    Tool\n    URL\n    UserAccount\n    Vulnerability\n    WindowsRegistryKey\n    X509Certificate\n    Bundle\n)   \n</code></pre></p> <p>Reference: https://docs.oasis-open.org/cti/stix/v2.1/stix-v2.1.html</p>"},{"location":"pages/library/objects/#custom-objects","title":"Custom Objects","text":""},{"location":"pages/library/objects/#dnsrecord","title":"DNSRecord","text":"<pre><code>from openstix.objects.custom import DNSRecord\n\ndns_record = DNSRecord(\n    record_class=\"IN\",\n    record_type=\"A\",\n    record_ttl=\"60\",\n    value=\"8.8.8.8\"\n)\n</code></pre>"},{"location":"pages/library/properties/","title":"Properties","text":"<pre><code>from openstix.properties import (\n    BinaryProperty\n    BooleanProperty\n    DictionaryProperty\n    EmbeddedObjectProperty\n    EnumProperty\n    ExtensionsProperty\n    FloatProperty\n    HashesProperty\n    HexProperty\n    IDProperty\n    IntegerProperty\n    ListProperty\n    ObjectReferenceProperty\n    ObservableProperty\n    OpenVocabProperty\n    PatternProperty\n    Property\n    ReferenceProperty\n    STIXObjectProperty\n    SelectorProperty\n    StringProperty\n    TimestampProperty\n    TypeProperty\n)\n</code></pre>"},{"location":"pages/library/utilities/","title":"Utilities","text":""},{"location":"pages/library/utilities/#common","title":"Common","text":"<pre><code>from openstix.utils.common import \n    check_hash\n    class_for_type\n    deduplicate\n    dict_to_stix2\n    format_datetime\n    get_current_timestamp\n    get_object_type\n    get_type_from_id\n    graph_equivalence\n    graph_similarity\n    infer_hash_algorithm\n    is_marking\n    is_object\n    is_sco\n    is_sdo\n    is_sro\n    is_stix_type\n    object_equivalence\n    object_similarity\n    parse\n    parse_into_datetime\n    parse_observable\n    remove_custom_stix\n)\n</code></pre>"},{"location":"pages/reference/workspace/","title":"Workspace","text":""},{"location":"pages/reference/workspace/#openstix.toolkit.Workspace","title":"Workspace","text":"<pre><code>Workspace(store=None)\n</code></pre> <p>               Bases: <code>Environment</code></p> <p>Extends the <code>stix2.Environment</code> class to provide a customized environment for handling STIX objects in a workspace context. Offers functionality for creating, querying, and removing STIX objects, including handling multiple versions of objects.</p> Source code in <code>src/openstix/toolkit/workspace.py</code> <pre><code>def __init__(self, store=None):\n    \"\"\"Initializes the Workspace with a MemoryStore.\"\"\"\n    if store is None:\n        store = MemoryStore()\n    super().__init__(store=store)\n</code></pre>"},{"location":"pages/reference/workspace/#openstix.toolkit.Workspace.create","title":"create","text":"<pre><code>create(cls, **kwargs)\n</code></pre> <p>Overrides the <code>create</code> method of the <code>Environment</code> class to add new STIX objects to the store immediately upon creation.</p> <pre><code>cls: the python-stix2 class of the object to be created (eg. Indicator)\n**kwargs: The property/value pairs of the STIX object to be created\n</code></pre> <pre><code>stix2.base._STIXBase: The newly created STIX object.\n</code></pre> Source code in <code>src/openstix/toolkit/workspace.py</code> <pre><code>def create(self, cls, **kwargs):\n    \"\"\"Overrides the `create` method of the `Environment` class to add new STIX objects\n    to the store immediately upon creation.\n\n    Args:\n    ----\n        cls: the python-stix2 class of the object to be created (eg. Indicator)\n        **kwargs: The property/value pairs of the STIX object to be created\n\n    Returns:\n    -------\n        stix2.base._STIXBase: The newly created STIX object.\n    \"\"\"\n    obj = super().create(cls, **kwargs)\n    self.add(obj)\n    return obj\n</code></pre>"},{"location":"pages/reference/workspace/#openstix.toolkit.Workspace.get","title":"get","text":"<pre><code>get(filters=None)\n</code></pre> <p>Executes a query against the store to retrieve a single STIX object.</p> <pre><code>filters (Optional[List], optional): A list of filters representing the query. Defaults to None.\n</code></pre> <pre><code>stix2.base._STIXBase: The STIX object that matches the query criteria. If no object is found, returns None.\n</code></pre> Source code in <code>src/openstix/toolkit/workspace.py</code> <pre><code>def get(self, filters=None):\n    \"\"\"Executes a query against the store to retrieve a single STIX object.\n\n    Args:\n    ----\n        filters (Optional[List], optional): A list of filters representing the query. Defaults to None.\n\n    Returns:\n    -------\n        stix2.base._STIXBase: The STIX object that matches the query criteria. If no object is found, returns None.\n    \"\"\"\n    filters = filters if filters else []\n\n    objects = self.query(filters)\n\n    if objects:\n        return objects[0]\n\n    return None\n</code></pre>"},{"location":"pages/reference/workspace/#openstix.toolkit.Workspace.parse","title":"parse","text":"<pre><code>parse(data, allow_custom=False)\n</code></pre> <p>Convert a string, dict or file-like object into a STIX object(s) and loads the object(s) into the Workspace's.</p> <pre><code>data (str, dict, file-like object): The STIX 2 content to be parsed.\nallow_custom (bool): Whether to allow custom properties as well unknown\n    custom objects. Note that unknown custom objects cannot be parsed\n    into STIX objects, and will be returned as is. Default: False.\n</code></pre> Source code in <code>src/openstix/toolkit/workspace.py</code> <pre><code>def parse(self, data, allow_custom=False):\n    \"\"\"Convert a string, dict or file-like object into a STIX object(s) and loads the object(s) into the Workspace's.\n\n    Args:\n    ----\n        data (str, dict, file-like object): The STIX 2 content to be parsed.\n        allow_custom (bool): Whether to allow custom properties as well unknown\n            custom objects. Note that unknown custom objects cannot be parsed\n            into STIX objects, and will be returned as is. Default: False.\n    \"\"\"\n    parsed_data = utils.parse(data, allow_custom)\n    if isinstance(parsed_data, Bundle):\n        self.add(parsed_data.objects)\n    else:\n        self.add(parsed_data)\n</code></pre>"},{"location":"pages/reference/workspace/#openstix.toolkit.Workspace.query","title":"query","text":"<pre><code>query(query=None, last_version_only=True)\n</code></pre> <p>Executes a query against the store to retrieve STIX objects.</p> <pre><code>query (Optional[List], optional): A list of filters representing the query. Defaults to None.\nlast_version_only (bool, optional): When True, only the most recent version of each object is\n                                    returned. Defaults to True.\n</code></pre> <pre><code>List[stix2.base._STIXBase]: A list of STIX objects that match the query criteria. When `last_version_only`\n                            is True, the list will contain only the most recent version of each object.\n</code></pre> Source code in <code>src/openstix/toolkit/workspace.py</code> <pre><code>def query(self, query=None, last_version_only=True):\n    \"\"\"Executes a query against the store to retrieve STIX objects.\n\n    Args:\n    ----\n        query (Optional[List], optional): A list of filters representing the query. Defaults to None.\n        last_version_only (bool, optional): When True, only the most recent version of each object is\n                                            returned. Defaults to True.\n\n    Returns:\n    -------\n        List[stix2.base._STIXBase]: A list of STIX objects that match the query criteria. When `last_version_only`\n                                    is True, the list will contain only the most recent version of each object.\n    \"\"\"\n    if query is None:\n        query = []\n\n    all_objects = super().query(query)\n    if not last_version_only or not all_objects:\n        return all_objects\n\n    def get_last_version_objects():\n        \"\"\"Yields the last version objects, sorted in reverse order of addition.\n\n        Yields\n        ------\n            stix2.base._STIXBase: Each STIX object in the store.\n        \"\"\"\n        seen = set()\n        for obj in reversed(all_objects):\n            if obj.id not in seen:\n                seen.add(obj.id)\n                yield obj\n\n    return list(get_last_version_objects())\n</code></pre>"},{"location":"pages/reference/workspace/#openstix.toolkit.Workspace.query_name_and_alias","title":"query_name_and_alias","text":"<pre><code>query_name_and_alias(name, filters=None, aliases=True)\n</code></pre> <p>Queries the store for a STIX object by name and aliases.</p> <pre><code>name (str): The name of the STIX object to be queried.\nfilters (Optional[List], optional): A list of filters representing the query. Defaults to None.\naliases (bool, optional): Whether to include aliases in the query. Defaults to True.\n</code></pre> <pre><code>stix2.base._STIXBase: The STIX object that matches the query criteria. If no object is found, returns None.\n</code></pre> Source code in <code>src/openstix/toolkit/workspace.py</code> <pre><code>def query_name_and_alias(self, name, filters=None, aliases=True):\n    \"\"\"Queries the store for a STIX object by name and aliases.\n\n    Args:\n    ----\n        name (str): The name of the STIX object to be queried.\n        filters (Optional[List], optional): A list of filters representing the query. Defaults to None.\n        aliases (bool, optional): Whether to include aliases in the query. Defaults to True.\n\n    Returns:\n    -------\n        stix2.base._STIXBase: The STIX object that matches the query criteria. If no object is found, returns None.\n    \"\"\"\n    possibilities = generate_possibilities(name)\n\n    name_filter = (filters or []) + [Filter(\"name\", \"in\", possibilities)]\n    result = self.get(name_filter)\n    if not result and aliases:\n        aliases_filter = (filters or []) + [Filter(\"aliases\", \"in\", possibilities)]\n        result = self.get(aliases_filter)\n\n    return result\n</code></pre>"},{"location":"pages/reference/workspace/#openstix.toolkit.Workspace.remove","title":"remove","text":"<pre><code>remove(object_id)\n</code></pre> <p>Removes an object, along with all its versions, from the store.</p> <pre><code>object_id (str): The ID of the STIX object to be removed.\n</code></pre> <pre><code>ValueError: If no object with the provided ID could be found.\n</code></pre> Source code in <code>src/openstix/toolkit/workspace.py</code> <pre><code>def remove(self, object_id):\n    \"\"\"Removes an object, along with all its versions, from the store.\n\n    Args:\n    ----\n        object_id (str): The ID of the STIX object to be removed.\n\n    Raises:\n    ------\n        ValueError: If no object with the provided ID could be found.\n    \"\"\"\n    try:\n        for source in self.source.data_sources:\n            del source._data[object_id]\n    except KeyError:\n        raise ValueError(f\"No object found with ID: {object_id}\")\n</code></pre>"},{"location":"pages/reference/workspace/#openstix.toolkit.Workspace.stats","title":"stats","text":"<pre><code>stats(query=[])\n</code></pre> <p>Generates statistics on the STIX objects within the store.</p> <p>This function will count the number of occurrences for each type of STIX object.</p> <pre><code>query (Optional[List], optional): A list of filters representing the query. Defaults to None.\n</code></pre> <pre><code>Dict[str, int]: A dictionary with STIX object types as keys and their counts as values.\n</code></pre> Source code in <code>src/openstix/toolkit/workspace.py</code> <pre><code>def stats(self, query=[]):\n    \"\"\"Generates statistics on the STIX objects within the store.\n\n    This function will count the number of occurrences for each type of STIX object.\n\n    Args:\n    ----\n        query (Optional[List], optional): A list of filters representing the query. Defaults to None.\n\n    Returns:\n    -------\n        Dict[str, int]: A dictionary with STIX object types as keys and their counts as values.\n    \"\"\"\n    stats = dict()\n    for obj in self.query(query):\n        stats[obj.type] = stats.get(obj.type, 0) + 1\n    return stats\n</code></pre>"},{"location":"pages/reference/api/stix2/","title":"STIX2 API Reference","text":""},{"location":"pages/reference/api/stix2/#stix2.v21.bundle","title":"bundle","text":"<p>STIX 2.1 Bundle Representation.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.bundle.Bundle","title":"Bundle","text":"<pre><code>Bundle(*args, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_gms872kuzdmg&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/bundle.py</code> <pre><code>def __init__(self, *args, **kwargs):\n    # Add any positional arguments to the 'objects' kwarg.\n    if args:\n        obj_list = []\n        for arg in args:\n            if isinstance(arg, list):\n                obj_list = obj_list + arg\n            else:\n                obj_list.append(arg)\n\n        kwargs['objects'] = obj_list + kwargs.get('objects', [])\n\n    super(Bundle, self).__init__(**kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.bundle.Bundle.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.bundle.Bundle.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common","title":"common","text":"<p>STIX 2.1 Common Data Types and Properties.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.ExtensionDefinition","title":"ExtensionDefinition","text":"<pre><code>ExtensionDefinition(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_32j232tfvtly&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.ExtensionDefinition.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.ExtensionDefinition.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.ExternalReference","title":"ExternalReference","text":"<pre><code>ExternalReference(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_72bcfr3t79jx&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.ExternalReference.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.ExternalReference.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.GranularMarking","title":"GranularMarking","text":"<pre><code>GranularMarking(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_robezi5egfdr&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.GranularMarking.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.GranularMarking.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.KillChainPhase","title":"KillChainPhase","text":"<pre><code>KillChainPhase(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_i4tjv75ce50h&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.KillChainPhase.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.KillChainPhase.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.LanguageContent","title":"LanguageContent","text":"<pre><code>LanguageContent(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_z9r1cwtu8jja&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.LanguageContent.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.LanguageContent.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.MarkingDefinition","title":"MarkingDefinition","text":"<pre><code>MarkingDefinition(**kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code>, <code>_MarkingsMixin</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_k5fndj2c7c1k&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/common.py</code> <pre><code>def __init__(self, **kwargs):\n    if {'definition_type', 'definition'}.issubset(kwargs.keys()):\n        # Create correct marking type object\n        try:\n            marking_type = OBJ_MAP_MARKING[kwargs['definition_type']]\n        except KeyError:\n            raise ValueError(\"definition_type must be a valid marking type\")\n\n        if not isinstance(kwargs['definition'], marking_type):\n            defn = _get_dict(kwargs['definition'])\n            kwargs['definition'] = marking_type(**defn)\n\n    super(MarkingDefinition, self).__init__(**kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.MarkingDefinition.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.MarkingProperty","title":"MarkingProperty","text":"<pre><code>MarkingProperty(required=False, fixed=None, default=None)\n</code></pre> <p>               Bases: <code>Property</code></p> <p>Represent the marking objects in the <code>definition</code> property of marking-definition objects.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/properties.py</code> <pre><code>def __init__(self, required=False, fixed=None, default=None):\n    self.required = required\n\n    if required and default:\n        raise STIXError(\n            \"Can't use 'required' and 'default' together. 'required'\"\n            \"really means 'the user must provide this.'\",\n        )\n\n    if fixed:\n        self._fixed_value = fixed\n        self.clean = self._default_clean\n        self.default = lambda: fixed\n    if default:\n        self.default = default\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.StatementMarking","title":"StatementMarking","text":"<pre><code>StatementMarking(statement=None, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_3ru8r05saera&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/common.py</code> <pre><code>def __init__(self, statement=None, **kwargs):\n    # Allow statement as positional args.\n    if statement and not kwargs.get('statement'):\n        kwargs['statement'] = statement\n\n    super(StatementMarking, self).__init__(**kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.StatementMarking.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.StatementMarking.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.TLPMarking","title":"TLPMarking","text":"<pre><code>TLPMarking(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_yd3ar14ekwrs&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.TLPMarking.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.TLPMarking.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.CustomExtension","title":"CustomExtension","text":"<pre><code>CustomExtension(type='x-custom-ext', properties=None)\n</code></pre> <p>Custom STIX Object Extension decorator.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/common.py</code> <pre><code>def CustomExtension(type='x-custom-ext', properties=None):\n    \"\"\"Custom STIX Object Extension decorator.\n    \"\"\"\n    def wrapper(cls):\n        return _custom_extension_builder(cls, type, properties, '2.1', _Extension)\n\n    return wrapper\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.common.CustomMarking","title":"CustomMarking","text":"<pre><code>CustomMarking(type='x-custom-marking', properties=None)\n</code></pre> <p>Custom STIX Marking decorator.</p> Example <p>from stix2.v21 import CustomMarking from stix2.properties import IntegerProperty, StringProperty @CustomMarking('x-custom-marking', [ ...     ('property1', StringProperty(required=True)), ...     ('property2', IntegerProperty()), ... ]) ... class MyNewMarkingObjectType(): ...     pass</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/common.py</code> <pre><code>def CustomMarking(type='x-custom-marking', properties=None):\n    \"\"\"Custom STIX Marking decorator.\n\n    Example:\n        &gt;&gt;&gt; from stix2.v21 import CustomMarking\n        &gt;&gt;&gt; from stix2.properties import IntegerProperty, StringProperty\n        &gt;&gt;&gt; @CustomMarking('x-custom-marking', [\n        ...     ('property1', StringProperty(required=True)),\n        ...     ('property2', IntegerProperty()),\n        ... ])\n        ... class MyNewMarkingObjectType():\n        ...     pass\n\n    \"\"\"\n    def wrapper(cls):\n        return _custom_marking_builder(cls, type, properties, '2.1', _STIXBase21)\n    return wrapper\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables","title":"observables","text":"<p>STIX 2.1 Cyber Observable Objects.</p> <p>Embedded observable object types, such as Email MIME Component, which is embedded in Email Message objects, inherit from <code>_STIXBase21</code> instead of _Observable and do not have a <code>_type</code> attribute.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.AlternateDataStream","title":"AlternateDataStream","text":"<pre><code>AlternateDataStream(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_8i2ts0xicqea&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.AlternateDataStream.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.AlternateDataStream.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.ArchiveExt","title":"ArchiveExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_xi3g7dwaigs6&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.Artifact","title":"Artifact","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_4jegwl6ojbes&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.AutonomousSystem","title":"AutonomousSystem","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_27gux0aol9e3&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.Directory","title":"Directory","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_lyvpga5hlw52&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.DomainName","title":"DomainName","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_prhhksbxbg87&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.EmailAddress","title":"EmailAddress","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_wmenahkvqmgj&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.EmailMIMEComponent","title":"EmailMIMEComponent","text":"<pre><code>EmailMIMEComponent(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_qpo5x7d8mefq&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.EmailMIMEComponent.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.EmailMIMEComponent.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.EmailMessage","title":"EmailMessage","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_grboc7sq5514&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.File","title":"File","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_99bl2dibcztv&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.HTTPRequestExt","title":"HTTPRequestExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_b0e376hgtml8&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.ICMPExt","title":"ICMPExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_ozypx0lmkebv&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.IPv4Address","title":"IPv4Address","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_ki1ufj1ku8s0&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.IPv6Address","title":"IPv6Address","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_oeggeryskriq&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.MACAddress","title":"MACAddress","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_f92nr9plf58y&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.Mutex","title":"Mutex","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_84hwlkdmev1w&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.NTFSExt","title":"NTFSExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_o6cweepfrsci&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.NetworkTraffic","title":"NetworkTraffic","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_rgnc3w40xy&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.PDFExt","title":"PDFExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_8xmpb2ghp9km&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.Process","title":"Process","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_hpppnm86a1jm&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.RasterImageExt","title":"RasterImageExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_u5z7i2ox8w4x&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.SocketExt","title":"SocketExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_8jamupj9ubdv&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.Software","title":"Software","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_7rkyhtkdthok&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.TCPExt","title":"TCPExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_k2njqio7f142&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.UNIXAccountExt","title":"UNIXAccountExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_hodiamlggpw5&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.URL","title":"URL","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_ah3hict2dez0&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.UserAccount","title":"UserAccount","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_azo70vgj1vm2&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsPEBinaryExt","title":"WindowsPEBinaryExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_gg5zibddf9bs&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsPEOptionalHeaderType","title":"WindowsPEOptionalHeaderType","text":"<pre><code>WindowsPEOptionalHeaderType(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_29l09w731pzc&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsPEOptionalHeaderType.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsPEOptionalHeaderType.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsPESection","title":"WindowsPESection","text":"<pre><code>WindowsPESection(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_ioapwyd8oimw&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsPESection.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsPESection.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsProcessExt","title":"WindowsProcessExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_oyegq07gjf5t&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsRegistryKey","title":"WindowsRegistryKey","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_luvw8wjlfo3y&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsRegistryValueType","title":"WindowsRegistryValueType","text":"<pre><code>WindowsRegistryValueType(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_u7n4ndghs3qq&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsRegistryValueType.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsRegistryValueType.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.WindowsServiceExt","title":"WindowsServiceExt","text":"<p>               Bases: <code>_Extension</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_lbcvc2ahx1s0&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.X509Certificate","title":"X509Certificate","text":"<p>               Bases: <code>_Observable</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_8abcy1o5x9w1&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.X509V3ExtensionsType","title":"X509V3ExtensionsType","text":"<pre><code>X509V3ExtensionsType(allow_custom=False, **kwargs)\n</code></pre> <p>               Bases: <code>_STIXBase21</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_oudvonxzdlku&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def __init__(self, allow_custom=False, **kwargs):\n    cls = self.__class__\n\n    # Use the same timestamp for any auto-generated datetimes\n    self.__now = get_timestamp()\n\n    custom_props = kwargs.pop('custom_properties', {})\n    if custom_props and not isinstance(custom_props, dict):\n        raise ValueError(\"'custom_properties' must be a dictionary\")\n\n    # Detect any keyword arguments representing customization.\n    # In STIX 2.1, this is complicated by \"toplevel-property-extension\"\n    # type extensions, which can add extra properties which are *not*\n    # considered custom.\n    extensions = kwargs.get(\"extensions\")\n    registered_toplevel_extension_props = {}\n    has_unregistered_toplevel_extension = False\n    if extensions:\n        for ext_id, ext in extensions.items():\n            if ext.get(\"extension_type\") == \"toplevel-property-extension\":\n                registered_ext_class = class_for_type(\n                    ext_id, \"2.1\", \"extensions\",\n                )\n                if registered_ext_class:\n                    registered_toplevel_extension_props.update(\n                        registered_ext_class._toplevel_properties,\n                    )\n                else:\n                    has_unregistered_toplevel_extension = True\n\n    if has_unregistered_toplevel_extension:\n        # Must assume all extras are extension properties, not custom.\n        custom_kwargs = set()\n\n    else:\n        # All toplevel property extensions (if any) have been\n        # registered.  So we can tell what their properties are and\n        # treat only those as not custom.\n        custom_kwargs = kwargs.keys() - self._properties.keys() \\\n            - registered_toplevel_extension_props.keys()\n\n    if custom_kwargs and not allow_custom:\n        raise ExtraPropertiesError(cls, custom_kwargs)\n\n    if custom_props:\n        # loophole for custom_properties...\n        allow_custom = True\n\n    all_custom_prop_names = (custom_kwargs | custom_props.keys()) - \\\n        self._properties.keys()\n    if all_custom_prop_names:\n        if not isinstance(self, stix2.v20._STIXBase20):\n            for prop_name in all_custom_prop_names:\n                if not re.match(PREFIX_21_REGEX, prop_name):\n                    raise InvalidValueError(\n                        self.__class__, prop_name,\n                        reason=\"Property name '%s' must begin with an alpha character.\" % prop_name,\n                    )\n\n    # defined_properties = all properties defined on this type, plus all\n    # properties defined on this instance as a result of toplevel property\n    # extensions.\n    defined_properties = collections.ChainMap(\n        self._properties, registered_toplevel_extension_props,\n    )\n\n    assigned_properties = collections.ChainMap(kwargs, custom_props)\n\n    # Establish property order: spec-defined, toplevel extension, custom.\n    toplevel_extension_props = registered_toplevel_extension_props.keys() \\\n        | (kwargs.keys() - self._properties.keys() - custom_kwargs)\n    property_order = itertools.chain(\n        self._properties,\n        toplevel_extension_props,\n        sorted(all_custom_prop_names),\n    )\n\n    setting_kwargs = {}\n\n    has_custom = bool(all_custom_prop_names)\n    for prop_name in property_order:\n\n        prop_val = assigned_properties.get(prop_name)\n        if prop_val not in (None, []):\n            setting_kwargs[prop_name] = prop_val\n\n        prop = defined_properties.get(prop_name)\n        if prop:\n            temp_custom = self._check_property(\n                prop_name, prop, setting_kwargs, allow_custom,\n            )\n\n            has_custom = has_custom or temp_custom\n\n    # Detect any missing required properties\n    required_properties = set(\n        get_required_properties(defined_properties),\n    )\n    missing_kwargs = required_properties - setting_kwargs.keys()\n    if missing_kwargs:\n        raise MissingPropertiesError(cls, missing_kwargs)\n\n    # Cache defaulted optional properties for serialization\n    defaulted = []\n    for name, prop in defined_properties.items():\n        try:\n            if (\n                not prop.required and not hasattr(prop, '_fixed_value') and\n                prop.default() == setting_kwargs[name]\n            ):\n                defaulted.append(name)\n        except (AttributeError, KeyError):\n            continue\n    self._defaulted_optional_properties = defaulted\n\n    self._inner = setting_kwargs\n\n    self._check_object_constraints()\n\n    if allow_custom:\n        self.__has_custom = has_custom\n\n    else:\n        # The simple case: our property cleaners are supposed to do their\n        # job and prevent customizations, so we just set to False.  But\n        # this sanity check is helpful for finding bugs in those clean()\n        # methods.\n        if has_custom:\n            raise STIXError(\n                \"Internal error: a clean() method did not properly enforce \"\n                \"allow_custom=False!\",\n            )\n\n        self.__has_custom = False\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.X509V3ExtensionsType.fp_serialize","title":"fp_serialize","text":"<pre><code>fp_serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object to <code>fp</code> (a text stream file-like supporting object).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n&gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n&gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n</code></pre> <p>Returns:</p> <ul> <li>           \u2013            <p>None</p> </li> </ul> See Also <p><code>stix2.serialization.fp_serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def fp_serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object to ``fp`` (a text stream file-like supporting object).\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n        &gt;&gt;&gt; with open(\"example.json\", mode=\"w\", encoding=\"utf-8\") as f:\n        &gt;&gt;&gt;     identity.fp_serialize(f, pretty=True)\n\n    Returns:\n        None\n\n    See Also:\n        ``stix2.serialization.fp_serialize`` for options.\n    \"\"\"\n    fp_serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.X509V3ExtensionsType.serialize","title":"serialize","text":"<pre><code>serialize(*args, **kwargs)\n</code></pre> <p>Serialize a STIX object.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import stix2\n&gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n{\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n&gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n{\n    \"created\": \"2018-06-08T19:03:54.066Z\",\n    \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n    \"identity_class\": \"organization\",\n    \"modified\": \"2018-06-08T19:03:54.066Z\",\n    \"name\": \"Example Corp.\",\n    \"type\": \"identity\"\n}\n</code></pre> <p>Returns:</p> <ul> <li> <code>str</code>          \u2013            <p>The serialized JSON object.</p> </li> </ul> See Also <p><code>stix2.serialization.serialize</code> for options.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/base.py</code> <pre><code>def serialize(self, *args, **kwargs):\n    \"\"\"\n    Serialize a STIX object.\n\n    Examples:\n        &gt;&gt;&gt; import stix2\n        &gt;&gt;&gt; identity = stix2.Identity(name='Example Corp.', identity_class='organization')\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True))\n        {\"created\": \"2018-06-08T19:03:54.066Z\", ... \"name\": \"Example Corp.\", \"type\": \"identity\"}\n        &gt;&gt;&gt; print(identity.serialize(sort_keys=True, indent=4))\n        {\n            \"created\": \"2018-06-08T19:03:54.066Z\",\n            \"id\": \"identity--d7f3e25a-ba1c-447a-ab71-6434b092b05e\",\n            \"identity_class\": \"organization\",\n            \"modified\": \"2018-06-08T19:03:54.066Z\",\n            \"name\": \"Example Corp.\",\n            \"type\": \"identity\"\n        }\n\n    Returns:\n        str: The serialized JSON object.\n\n    See Also:\n        ``stix2.serialization.serialize`` for options.\n    \"\"\"\n    return serialize(self, *args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.observables.CustomObservable","title":"CustomObservable","text":"<pre><code>CustomObservable(type='x-custom-observable', properties=None, id_contrib_props=None, extension_name=None)\n</code></pre> <p>Custom STIX Cyber Observable Object type decorator.</p> Example <p>from stix2.v21 import CustomObservable from stix2.properties import IntegerProperty, StringProperty @CustomObservable('x-custom-observable', [ ...     ('property1', StringProperty(required=True)), ...     ('property2', IntegerProperty()), ... ]) ... class MyNewObservableType(): ...     pass</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/observables.py</code> <pre><code>def CustomObservable(type='x-custom-observable', properties=None, id_contrib_props=None, extension_name=None):\n    \"\"\"Custom STIX Cyber Observable Object type decorator.\n\n    Example:\n        &gt;&gt;&gt; from stix2.v21 import CustomObservable\n        &gt;&gt;&gt; from stix2.properties import IntegerProperty, StringProperty\n        &gt;&gt;&gt; @CustomObservable('x-custom-observable', [\n        ...     ('property1', StringProperty(required=True)),\n        ...     ('property2', IntegerProperty()),\n        ... ])\n        ... class MyNewObservableType():\n        ...     pass\n\n    \"\"\"\n    def wrapper(cls):\n        _properties = list(\n            itertools.chain(\n                [\n                    ('type', TypeProperty(type, spec_version='2.1')),\n                    ('spec_version', StringProperty(fixed='2.1')),\n                    ('id', IDProperty(type, spec_version='2.1')),\n                ],\n                properties,\n                [\n                    ('object_marking_refs', ListProperty(ReferenceProperty(valid_types='marking-definition', spec_version='2.1'))),\n                    ('granular_markings', ListProperty(GranularMarking)),\n                    ('defanged', BooleanProperty(default=lambda: False)),\n                    ('extensions', ExtensionsProperty(spec_version='2.1')),\n                ],\n            ),\n        )\n        if extension_name:\n            @CustomExtension(type=extension_name, properties={})\n            class NameExtension:\n                extension_type = 'new-sco'\n\n            extension = extension_name.split('--')[1]\n            extension = extension.replace('-', '')\n            NameExtension.__name__ = 'ExtensionDefinition' + extension\n            cls.with_extension = extension_name\n        return _custom_observable_builder(cls, type, _properties, '2.1', _Observable, id_contrib_props)\n    return wrapper\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo","title":"sdo","text":"<p>STIX 2.1 Domain Objects.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.AttackPattern","title":"AttackPattern","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_axjijf603msy&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Campaign","title":"Campaign","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_pcpvfz4ik6d6&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.CourseOfAction","title":"CourseOfAction","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_a925mpw39txn&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Grouping","title":"Grouping","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_t56pn7elv6u7&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Identity","title":"Identity","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_wh296fiwpklp&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Incident","title":"Incident","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_sczfhw64pjxt&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Indicator","title":"Indicator","text":"<pre><code>Indicator(*args, **kwargs)\n</code></pre> <p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_muftrcpnf89v&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/sdo.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\n    if kwargs.get('pattern') and kwargs.get('pattern_type') == 'stix' and not kwargs.get('pattern_version'):\n        kwargs['pattern_version'] = '2.1'\n\n    super(Indicator, self).__init__(*args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Infrastructure","title":"Infrastructure","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_jo3k1o6lr9&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.IntrusionSet","title":"IntrusionSet","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_5ol9xlbbnrdn&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Location","title":"Location","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_th8nitr8jb4k&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Location.to_maps_url","title":"to_maps_url","text":"<pre><code>to_maps_url(map_engine='Google Maps')\n</code></pre> <p>Return URL to this location in an online map engine.</p> <p>Google Maps is the default, but Bing maps are also supported.</p> <p>Parameters:</p> <ul> <li> <code>map_engine</code>               (<code>str</code>, default:                   <code>'Google Maps'</code> )           \u2013            <p>Which map engine to find the location in</p> </li> </ul> <p>Returns:</p> <ul> <li>           \u2013            <p>The URL of the location in the given map engine.</p> </li> </ul> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/sdo.py</code> <pre><code>def to_maps_url(self, map_engine=\"Google Maps\"):\n    \"\"\"Return URL to this location in an online map engine.\n\n    Google Maps is the default, but Bing maps are also supported.\n\n    Args:\n        map_engine (str): Which map engine to find the location in\n\n    Returns:\n        The URL of the location in the given map engine.\n\n    \"\"\"\n    params = []\n\n    latitude = self.get('latitude', None)\n    longitude = self.get('longitude', None)\n    if latitude is not None and longitude is not None:\n        params.extend([str(latitude), str(longitude)])\n    else:\n        properties = ['street_address', 'city', 'country', 'region', 'administrative_area', 'postal_code']\n        params = [self.get(prop) for prop in properties if self.get(prop) is not None]\n\n    return self._to_maps_url_dispatcher(map_engine, params)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Malware","title":"Malware","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_s5l7katgbp09&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.MalwareAnalysis","title":"MalwareAnalysis","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_6hdrixb3ua4j&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Note","title":"Note","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_gudodcg1sbb9&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.ObservedData","title":"ObservedData","text":"<pre><code>ObservedData(*args, **kwargs)\n</code></pre> <p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_p49j1fwoxldc&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/sdo.py</code> <pre><code>def __init__(self, *args, **kwargs):\n\n    if \"objects\" in kwargs:\n        warnings.warn(\n            \"The 'objects' property of observed-data is deprecated in \"\n            \"STIX 2.1.\",\n            STIXDeprecationWarning,\n        )\n\n    super(ObservedData, self).__init__(*args, **kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Opinion","title":"Opinion","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_ht1vtzfbtzda&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Report","title":"Report","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_n8bjzg1ysgdq&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.ThreatActor","title":"ThreatActor","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_k017w16zutw&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Tool","title":"Tool","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_z4voa9ndw8v&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.Vulnerability","title":"Vulnerability","text":"<p>               Bases: <code>_DomainObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_q5ytzmajn6re&gt;</code>__.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sdo.CustomObject","title":"CustomObject","text":"<pre><code>CustomObject(type='x-custom-type', properties=None, extension_name=None, is_sdo=True)\n</code></pre> <p>Custom STIX Object type decorator.</p> Example <p>from stix2.v21 import CustomObject from stix2.properties import IntegerProperty, StringProperty @CustomObject('x-type-name', [ ...     ('property1', StringProperty(required=True)), ...     ('property2', IntegerProperty()), ... ]) ... class MyNewObjectType(): ...     pass</p> <p>Supply an <code>__init__()</code> function to add any special validations to the custom type. Don't call <code>super().__init__()</code> though - doing so will cause an error.</p> Example <p>from stix2.v21 import CustomObject from stix2.properties import IntegerProperty, StringProperty @CustomObject('x-type-name', [ ...     ('property1', StringProperty(required=True)), ...     ('property2', IntegerProperty()), ... ]) ... class MyNewObjectType(): ...     def init(self, property2=None, **kwargs): ...         if property2 and property2 &lt; 10: ...             raise ValueError(\"'property2' is too small.\")</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/sdo.py</code> <pre><code>def CustomObject(type='x-custom-type', properties=None, extension_name=None, is_sdo=True):\n    \"\"\"Custom STIX Object type decorator.\n\n    Example:\n        &gt;&gt;&gt; from stix2.v21 import CustomObject\n        &gt;&gt;&gt; from stix2.properties import IntegerProperty, StringProperty\n        &gt;&gt;&gt; @CustomObject('x-type-name', [\n        ...     ('property1', StringProperty(required=True)),\n        ...     ('property2', IntegerProperty()),\n        ... ])\n        ... class MyNewObjectType():\n        ...     pass\n\n    Supply an ``__init__()`` function to add any special validations to the custom\n    type. Don't call ``super().__init__()`` though - doing so will cause an error.\n\n    Example:\n        &gt;&gt;&gt; from stix2.v21 import CustomObject\n        &gt;&gt;&gt; from stix2.properties import IntegerProperty, StringProperty\n        &gt;&gt;&gt; @CustomObject('x-type-name', [\n        ...     ('property1', StringProperty(required=True)),\n        ...     ('property2', IntegerProperty()),\n        ... ])\n        ... class MyNewObjectType():\n        ...     def __init__(self, property2=None, **kwargs):\n        ...         if property2 and property2 &lt; 10:\n        ...             raise ValueError(\"'property2' is too small.\")\n\n    \"\"\"\n    def wrapper(cls):\n        extension_properties = [x for x in properties if not x[0].startswith('x_')]\n        _properties = (\n            [\n                ('type', TypeProperty(type, spec_version='2.1')),\n                ('spec_version', StringProperty(fixed='2.1')),\n                ('id', IDProperty(type, spec_version='2.1')),\n                ('created_by_ref', ReferenceProperty(valid_types='identity', spec_version='2.1')),\n                ('created', TimestampProperty(default=lambda: NOW, precision='millisecond', precision_constraint='min')),\n                ('modified', TimestampProperty(default=lambda: NOW, precision='millisecond', precision_constraint='min')),\n            ]\n            + extension_properties\n            + [\n                ('revoked', BooleanProperty(default=lambda: False)),\n                ('labels', ListProperty(StringProperty)),\n                ('confidence', IntegerProperty()),\n                ('lang', StringProperty()),\n                ('external_references', ListProperty(ExternalReference)),\n                ('object_marking_refs', ListProperty(ReferenceProperty(valid_types='marking-definition', spec_version='2.1'))),\n                ('granular_markings', ListProperty(GranularMarking)),\n                ('extensions', ExtensionsProperty(spec_version='2.1')),\n            ]\n            + sorted((x for x in properties if x[0].startswith('x_')), key=lambda x: x[0])\n        )\n\n        if extension_name:\n            @CustomExtension(type=extension_name, properties={})\n            class NameExtension:\n                if is_sdo:\n                    extension_type = 'new-sdo'\n                else:\n                    extension_type = 'new-sro'\n\n            extension = extension_name.split('--')[1]\n            extension = extension.replace('-', '')\n            NameExtension.__name__ = 'ExtensionDefinition' + extension\n            cls.with_extension = extension_name\n        return _custom_object_builder(cls, type, _properties, '2.1', _DomainObject)\n\n    return wrapper\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.sro","title":"sro","text":"<p>STIX 2.1 Relationship Objects.</p>"},{"location":"pages/reference/api/stix2/#stix2.v21.sro.Relationship","title":"Relationship","text":"<pre><code>Relationship(source_ref=None, relationship_type=None, target_ref=None, **kwargs)\n</code></pre> <p>               Bases: <code>_RelationshipObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_e2e1szrqfoan&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/sro.py</code> <pre><code>def __init__(\n    self, source_ref=None, relationship_type=None,\n    target_ref=None, **kwargs\n):\n    # Allow (source_ref, relationship_type, target_ref) as positional args.\n    if source_ref and not kwargs.get('source_ref'):\n        kwargs['source_ref'] = source_ref\n    if relationship_type and not kwargs.get('relationship_type'):\n        kwargs['relationship_type'] = relationship_type\n    if target_ref and not kwargs.get('target_ref'):\n        kwargs['target_ref'] = target_ref\n\n    super(Relationship, self).__init__(**kwargs)\n</code></pre>"},{"location":"pages/reference/api/stix2/#stix2.v21.sro.Sighting","title":"Sighting","text":"<pre><code>Sighting(sighting_of_ref=None, **kwargs)\n</code></pre> <p>               Bases: <code>_RelationshipObject</code></p> <p>For more detailed information on this object's properties, see <code>the STIX 2.1 specification &lt;https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_a795guqsap3r&gt;</code>__.</p> Source code in <code>.venv/default/lib/python3.10/site-packages/stix2/v21/sro.py</code> <pre><code>def __init__(self, sighting_of_ref=None, **kwargs):\n    # Allow sighting_of_ref as a positional arg.\n    if sighting_of_ref and not kwargs.get('sighting_of_ref'):\n        kwargs['sighting_of_ref'] = sighting_of_ref\n\n    super(Sighting, self).__init__(**kwargs)\n</code></pre>"},{"location":"pages/usecases/manage-intelligence/","title":"Manage Intelligence","text":"<p>Import the necessary modules and get started with creating and managing STIX objects within your defined workspace.</p>"},{"location":"pages/usecases/manage-intelligence/#start","title":"Start","text":""},{"location":"pages/usecases/manage-intelligence/#initialize-workspace","title":"Initialize workspace","text":"<pre><code>from openstix.toolkit.workspace import Workspace\n\n# Create a new workspace with your organization's namespace\nworkspace = Workspace(namespace=\"&lt;your-namespace-uuid&gt;\")\n</code></pre>"},{"location":"pages/usecases/manage-intelligence/#load-and-parse","title":"Load and Parse","text":"<pre><code>data = \"\"\"\n{\n    \"type\": \"bundle\",\n    \"id\": \"bundle--0ef10afc-6a6b-4df7-bc4b-099977bfcba8\",\n    \"objects\": [\n        {\n            \"type\": \"domain-name\",\n            \"spec_version\": \"2.1\",\n            \"id\": \"domain-name--9076dffc-9b97-55f6-a720-bc115b25fe31\",\n            \"value\": \"openstix.dev\"\n        }\n    ]\n}\n\"\"\"\n\n# Parse STIX data and load automatically the objects in workspace\nworkspace.parse(data)\n</code></pre>"},{"location":"pages/usecases/manage-intelligence/#crud","title":"CRUD","text":""},{"location":"pages/usecases/manage-intelligence/#create-sco-within-workspace","title":"Create SCO within workspace","text":"<pre><code>from openstix.objects import DomainName\n\n# Add STIX observable object (SCO)\ndomain = self.workspace.create(Domain, value=\"abusetotal.com\")\n</code></pre>"},{"location":"pages/usecases/manage-intelligence/#remove-object-from-workspace","title":"Remove object from workspace","text":"<pre><code># Remove STIX observable object (SCO)\nself.workspace.remove(domain.id)\n</code></pre>"},{"location":"pages/usecases/manage-intelligence/#create-sdo-within-workspace","title":"Create SDO within workspace","text":"<pre><code>from openstix.objects import Malware\n\n# Add STIX domain object (SDO)\nself.workspace.create(Malware, name=\"Malicious\", is_family=False)\n</code></pre>"},{"location":"pages/usecases/manage-intelligence/#filtering","title":"Filtering","text":""},{"location":"pages/usecases/manage-intelligence/#filter-workspace-objects-using-presets-filters","title":"Filter workspace objects using presets filters","text":"<pre><code>from openstix.toolkit.filters.presets import MALWARE_FILTER\n\n# Filter objects using presets\nmalwares = self.workspace.query(MALWARE_FILTER)\n</code></pre>"},{"location":"pages/usecases/use-datasets/","title":"Use Datasets","text":"<p>In order to avoid having to create, for example, attack pattern objects for MITRE ATT&amp;CK and have duplicated objects all over the place, with openstix you can download STIX datasets from external providers and use them in a seemsly way.</p>"},{"location":"pages/usecases/use-datasets/#get-mitre-ttp-using-mitre-datasets","title":"Get MITRE TTP using MITRE Datasets","text":"<p>Note: make sure you have downloaded the dataset using openstix cli</p> <pre><code>from openstix.datasets import MITREDataset\n\ndataset = MITREDataset()\ndataset.load()\n\n# Use Attack Pattern objects from MITRE Dataset\nattack_pattern = dataset.attack_pattern(\"T1090\")\n</code></pre>"},{"location":"pages/usecases/use-datasets/#get-country-and-regions-objects-using-geolocation-datasets","title":"Get country and regions objects using GeoLocation Datasets","text":"<p>Note: make sure you have downloaded the dataset using openstix cli</p> <pre><code>from openstix.datasets import GeoLocationsDataset\n\ndataset = GeoLocationsDataset()\ndataset.load()\n\n# Use Location objects from GeoLocation Dataset\ncountry = dataset.country(\"PT\")\nregion = dataset.region(\"Europe\")\n</code></pre>"},{"location":"pages/workspace/overview/","title":"Overview","text":"<p>The goal of workspace is to provide the capability to the analysts to handle stix objects in a efficient and easy way.</p>"},{"location":"pages/workspace/advanced/filters/","title":"Filter objects","text":"<p>Filters</p>"},{"location":"pages/workspace/advanced/related/","title":"Related objects","text":"<p>Related</p>"},{"location":"pages/workspace/advanced/search/","title":"Search objects","text":"<p>Search</p>"},{"location":"pages/workspace/advanced/similar/","title":"Similar objects","text":"<p>Similar</p>"},{"location":"pages/workspace/basic/change/","title":"Change objects","text":"<p>Change</p>"},{"location":"pages/workspace/basic/create/","title":"Create Objects in the Workspace","text":"<p>Creating objects in the OpenSTIX workspace is essential for adding new STIX objects to your environment. This guide will walk you through the steps to efficiently create various types of STIX objects using the Workspace class, leveraging the powerful capabilities of the STIX 2.1 specification. By using the create method of the Workspace class, you can easily add, customize with additional properties, and manage various types of STIX objects.</p> <p>For more detailed information on the different types of STIX objects you can create, refer to the STIX 2.1 documentation.</p>"},{"location":"pages/workspace/basic/create/#prerequisites","title":"Prerequisites","text":"<p>Before creating objects, ensure that you have the OpenSTIX library installed and properly configured in your environment.</p>"},{"location":"pages/workspace/basic/create/#importing-necessary-modules","title":"Importing Necessary Modules","text":"<p>First, import the necessary modules and classes:</p> <pre><code>from openstix.objects import Indicator, Malware\nfrom openstix import Workspace\n</code></pre>"},{"location":"pages/workspace/basic/create/#initializing-the-workspace","title":"Initializing the Workspace","text":"<p>Create an instance of the Workspace class</p> <pre><code>workspace = Workspace()\n</code></pre>"},{"location":"pages/workspace/basic/create/#creating-stix-objects","title":"Creating STIX Objects","text":""},{"location":"pages/workspace/basic/create/#example-1-creating-an-indicator","title":"Example 1: Creating an Indicator","text":"<p>Indicators are used to describe specific and observable patterns of malicious activities. Here\u2019s how to create an Indicator:</p> <pre><code>indicator = workspace.create(\n    Indicator, \n    name=\"Malicious IP\", \n    pattern=\"[ipv4-addr:value = '203.0.113.1']\", \n    pattern_type=\"stix\"\n)\nprint(indicator.serialize(pretty=True))\n</code></pre>"},{"location":"pages/workspace/basic/create/#example-2-creating-malware","title":"Example 2: Creating Malware","text":"<p>Malware objects are used to describe malicious software, such as viruses, worms, or Trojans:</p> <pre><code>malware = workspace.create(\n    Malware, \n    name=\"Example Malware\", \n    malware_types=[\"ransomware\"]\n)\nprint(malware.serialize(pretty=True))\n</code></pre>"},{"location":"pages/workspace/basic/create/#adding-custom-properties","title":"Adding Custom Properties","text":"<p>You can add custom properties to your STIX objects by including them as keyword arguments:</p> <pre><code>custom_indicator = workspace.create(\n    Indicator, \n    name=\"Custom Indicator\", \n    pattern=\"[ipv4-addr:value = '198.51.100.1']\", \n    pattern_type=\"stix\", \n    confidence=75\n)\nprint(custom_indicator.serialize(pretty=True))\n</code></pre>"},{"location":"pages/workspace/basic/remove/","title":"Remove objects","text":"<p>Remove</p>"},{"location":"users_guide/","title":"User's Guide","text":"<p>Welcome to the OpenSTIX User's Guide. This guide will help you understand how to effectively use OpenSTIX for your projects. </p>"},{"location":"users_guide/working_with_workspace/","title":"Working with Workspaces","text":""},{"location":"users_guide/working_with_workspace/#using-the-workspace-for-cybersecurity-analysis","title":"Using the Workspace for Cybersecurity Analysis","text":"<p>The Workspace class extends the stix2.Environment class to provide a customized environment for handling STIX objects. This guide will walk you through using the Workspace class to perform various operations, such as creating, querying, and parsing STIX objects.</p> <p>Prerequisites</p> <ul> <li>Python 3.7 or higher</li> <li>OpenSTIX library installed (pip install openstix)</li> </ul>"},{"location":"users_guide/working_with_workspace/#importing-required-modules","title":"Importing Required Modules","text":"<p>First, import the necessary modules:</p> <pre><code>from stix2 import Environment, MemoryStore\nfrom openstix import utils\nfrom openstix.objects import Bundle\n</code></pre>"},{"location":"users_guide/working_with_workspace/#initializing-the-workspace","title":"Initializing the Workspace","text":"<p>Create an instance of the Workspace class. By default, it uses a MemoryStore to store STIX objects.</p> <pre><code>workspace = Workspace()\n</code></pre>"},{"location":"users_guide/working_with_workspace/#creating-stix-objects","title":"Creating STIX Objects","text":"<p>You can create and add STIX objects to the workspace using the create method. This method immediately adds the created object to the store.</p> <p>Example: Creating an Indicator <pre><code>indicator = workspace.create('Indicator', name='Malicious IP', pattern=\"[ipv4-addr:value = '198.51.100.1']\")\nprint(indicator.serialize(pretty=True))\n</code></pre></p>"},{"location":"users_guide/working_with_workspace/#querying-stix-objects","title":"Querying STIX Objects","text":"<p>Use the <code>query</code> method to retrieve STIX objects from the store. You can filter results and choose to return only the most recent versions of objects.</p> <p>Example: Querying All Objects <pre><code>all_objects = workspace.query()\nfor obj in all_objects:\n    print(obj.serialize(pretty=True))\n</code></pre></p> <p>Example: Querying with Filters <pre><code>from openstix.toolkit.filters.presets import INDICATOR_FILTER\n\nindicators = workspace.query(INDICATOR_FILTER)\nfor indicator in indicators:\n    print(indicator.serialize(pretty=True))\n</code></pre></p>"},{"location":"users_guide/working_with_workspace/#parsing-stix-data","title":"Parsing STIX Data","text":"<p>The <code>parse</code> method allows you to convert a string, dictionary, or file-like object containing STIX data into STIX objects and add them to the workspace.</p> <p>Example: Parsing a JSON Bundle</p> <p>Assume you have a STIX bundle in a JSON file named <code>bundle.json</code>. <pre><code>with open('bundle.json', 'r') as f:\n    data = f.read()\nworkspace.parse(data)\n</code></pre></p>"},{"location":"users_guide/working_with_workspace/#generating-statistics","title":"Generating Statistics","text":"<p>The <code>stats</code> method generates statistics on the STIX objects within the store, counting the occurrences of each type of STIX object.</p> <p>Example: Generating Statistics</p> <pre><code>stats = workspace.stats()\nprint(stats)\n</code></pre>"},{"location":"users_guide/working_with_workspace/#generating-statistics_1","title":"Generating Statistics","text":"<p>You can remove a STIX object and all its versions from the store using the <code>remove</code> method.</p> <p>Example: Removing an Object</p> <pre><code>object_id = 'indicator--12345678-1234-1234-1234-123456789012'\nworkspace.remove(object_id)\n</code></pre>"},{"location":"users_guide/working_with_workspace/#complete-example-cybersecurity-analysis","title":"Complete Example: Cybersecurity Analysis","text":"<p>Here is a complete example that demonstrates creating, querying, parsing, and analyzing network traffic data using the <code>Workspace</code> class.</p> <pre><code>from stix2 import Environment, MemoryStore\nfrom openstix import utils\nfrom openstix.objects import Bundle\n\n# Initialize the workspace\nworkspace = Workspace()\n\n# Create an IP address observable\nsrc_ip = workspace.create('IPv4Address', value='192.168.1.1')\ndst_ip = workspace.create('IPv4Address', value='10.0.0.1')\n\n# Create a Network Traffic object\nnetwork_traffic = workspace.create(\n    'NetworkTraffic',\n    start=\"2024-06-01T12:00:00Z\",\n    end=\"2024-06-01T12:05:00Z\",\n    src_ref=src_ip.id,\n    dst_ref=dst_ip.id,\n    protocols=[\"tcp\"],\n    src_port=443,\n    dst_port=8080\n)\n\n# Bundle the objects and serialize to JSON\nbundle = Bundle(objects=[src_ip, dst_ip, network_traffic])\nprint(bundle.serialize(pretty=True))\n\n# Query the workspace for all objects\nall_objects = workspace.query()\nfor obj in all_objects:\n    print(obj.serialize(pretty=True))\n\n# Parse a STIX bundle from a JSON file\nwith open('bundle.json', 'r') as f:\n    data = f.read()\nworkspace.parse(data)\n\n# Generate statistics\nstats = workspace.stats()\nprint(stats)\n\n# Remove an object by ID\nobject_id = 'network-traffic--12345678-1234-1234-1234-123456789012'\nworkspace.remove(object_id)\n</code></pre>"}]}